from sympy import sqrt
from sympy import Rational as R

# Dormand-Prince 8(7)
# Runge-Kutta-Nystrom 12(10)
# Gauss-Jackson (GJ)
# Adams-Bashforth-Moulton (ABM)

class ExplicitRKMethod:
    def __init__(self):
        self.matrix = [[], []]
        self.weights = [[], []]
        self.nodes = []
        self.details = ""
        self.order = 0


class EmbeddedExplicitRKMethod(ExplicitRKMethod):
    def __init__(self):
        super().__init__()
        self.correctorweights = []


# - Explicit Methods

# -- First Order
# ======================================================================================================================
# --- Explicit Euler Method.
euler = ExplicitRKMethod()
euler.matrix = [0, ]
euler.weights = [1, ]
euler.nodes = [0, ]
euler.order = 1
euler.details = '''Explicit Euler method'''
# ======================================================================================================================

# -- Second Order
# ======================================================================================================================
# --- Explicit Midpoint Method.
midpoint = ExplicitRKMethod()
midpoint.matrix = [[0, 0],
                [R(1, 2), 0]]
midpoint.weights = [0, 1]
midpoint.nodes = [0, R(1, 2)]
midpoint.order = 2
midpoint.details = '''Explicit Midpoint method'''

# --- Explicit Trapezoid Rule/Heun's Method
rk2_heun = ExplicitRKMethod()
rk2_heun.matrix = [[0, 0], [1, 0]]
rk2_heun.weights = [R(1, 2), R(1, 2)]
rk2_heun.nodes = [0, 1]
rk2_heun.order = 2
rk2_heun.details = '''Explicit Trapezoid Rule/Heun's Method
                 '''

# --- Ralston's Method
rk2_ralston = ExplicitRKMethod()
rk2_ralston.matrix = [[0, 0], [R(2, 3), 0]]
rk2_ralston.weights = [R(1, 4), R(3, 4)]
rk2_ralston.nodes = [0, R(2, 3)]
rk2_ralston.order = 2
rk2_ralston.details = '''Ralston's Method
                 '''
# ======================================================================================================================

# -- Third Order
# ======================================================================================================================
# --- Kutta's Method
rk3_kutta = ExplicitRKMethod()
rk3_kutta.matrix = [[0, 0, 0],
                    [R(1, 2), 0, 0],
                    [-1, 2, 0]]
rk3_kutta.weights = [R(1, 6), R(2, 3), R(1, 6)]
rk3_kutta.nodes = [0, R(1, 2), 1]
rk3_kutta.order = 3
rk3_kutta.details = '''Kutta's Method
                 '''

# --- Heun's 3rd Order Method
rk3_heun = ExplicitRKMethod()
rk3_heun.matrix = [[0, 0, 0],
                   [R(1, 3), 0, 0],
                   [0, R(2, 3), 0]]
rk3_heun.weights = [R(1, 4), 0, R(3, 4)]
rk3_heun.nodes = [0, R(1, 3), R(2, 3)]
rk3_heun.order = 3
rk3_heun.details = '''Heun's Method
                 '''

# --- Ralston's 3rd Order Method
rk3_ralston = ExplicitRKMethod()
rk3_ralston.matrix = [[0, 0, 0],
                      [R(1, 2), 0, 0],
                      [0, R(3, 4), 0]]
rk3_ralston.weights = [R(2, 9), R(1, 3), R(4, 9)]
rk3_ralston.nodes = [0, R(1, 2), R(3, 4)]
rk3_ralston.order = 3
rk3_ralston.details = '''Ralston's Method
                 '''

# --- Strong Stability Preserving Runge-Kutta (SSPRK3)
ssprk3 = ExplicitRKMethod()
ssprk3.matrix = [[0, 0, 0],
                 [1, 0, 0],
                 [R(1, 4), R(1, 4), 0]]
ssprk3.weights = [R(1, 6), R(1, 6), R(2, 3)]
ssprk3.nodes = [0, 1, R(1, 2)]
ssprk3.order = 3
ssprk3.details = '''Strong Stability Preserving Runge-Kutta
                 '''
# ======================================================================================================================

# -- Fourth Order
# ======================================================================================================================
# --- RK4
rk4 = ExplicitRKMethod()
rk4.matrix = [[0, 0, 0, 0],
              [R(1, 2), 0, 0, 0],
              [0, R(1, 2), 0, 0],
              [0, 0, 1, 0]]
rk4.weights = [R(1, 6), R(1, 3), R(1, 3), R(1, 6)]
rk4.nodes = [0, R(1, 2), R(1, 2), 1]
rk4.order = 4
rk4.details = '''Classic Runge-Kutta 4th Order Method'''

# --- RK4 R(3, 8) Method.
rk4_38 = ExplicitRKMethod()
rk4_38.matrix = [[0, 0, 0, 0],
                 [R(1, 3), 0, 0, 0],
                 [-R(1, 3), 1, 0, 0],
                 [1, -1, 1, 0]]
rk4_38.weights = [R(1, 8), R(3, 8), R(3, 8), R(1, 8)]
rk4_38.nodes = [0, R(1, 3), R(2, 3), 1]
rk4_38.order = 4
rk4_38.details = '''"3/8" Runge-Kutta 4th Order Method'''
# ======================================================================================================================

# Embedded Explicit MEthods

# Fehlberg's RK1(2)3F
rk1_2_3f = EmbeddedExplicitRKMethod()
rk1_2_3f.matrix = [[0.0, 0.0, 0.0],
                   [1.0/2.0, 0.0, 0.0],
                   [1.0/256.0, 255.0/256.0, 0.0]]
rk1_2_3f.weights = [R(1, 256), R(255, 256), 0]
rk1_2_3f.correctorweights = [R(1, 512), R(255, 256), R(1, 512)]
rk1_2_3f.nodes = [0, R(1, 2), 1]
rk1_2_3f.order = 1
rk1_2_3f.details = '''Fehlberg's RK1(2)3F, Table XIV [3].'''

# Euler-Cauchy RK1(2)2F
rk1_2_2f = EmbeddedExplicitRKMethod()
rk1_2_2f.matrix = [[0, 0],
                   [1, 0]]
rk1_2_2f.weights = [1, 0]
rk1_2_2f.correctorweights = [R(1, 2), R(1, 2)]
rk1_2_2f.nodes = [0, 1]
rk1_2_2f.order = 1
rk1_2_2f.details = '''Euler-Cauchy RK1(2)2F, Table XV [3].'''

# Bettis' RK2(3)4
rk23 = EmbeddedExplicitRKMethod()
rk23.matrix = [[0, 0, 0, 0],
                  [R(1, 2), 0, 0, 0],
                  [R(1, 4), R(1, 4), 0, 0],
                  [0, -R(143, 144), R(287, 144), 0]]
rk23.weights = [0, 0, 1, 0]
rk23.correctorweights = [R(1, 6), 0, R(2, 3), R(1, 6)]
rk23.nodes = [0, R(1, 2), R(1, 2), 1]
rk23.details = '''Bettis' RK2(3)4, Table II [12].'''
rk23.order = 0

# Fehlberg's RK2(3)4
rkf23_4 = EmbeddedExplicitRKMethod()
rkf23_4.matrix = [[0, 0, 0, 0],
                  [R(1, 4), 0, 0, 0],
                  [-R(189, 800), R(729, 800), 0, 0],
                  [R(214, 891), R(1, 33), R(650, 891), 0]]
rkf23_4.weights = [R(214, 891), R(1, 33), R(650, 891), 0]
rkf23_4.correctorweights = [R(533, 2106), 0, R(800, 1053), -R(1, 78)]
rkf23_4.nodes = [0, R(1, 4), R(27, 40), 1]
rkf23_4.details = '''Fehlberg's RK2(3)4 method
                              - From Table XI in [3].'''
rkf23_4.order = 2

# Fehlberg's RK2(3)3
rkf23_3 = EmbeddedExplicitRKMethod()
rkf23_3.matrix = [[0, 0, 0],
                  [1, 0, 0],
                  [R(1, 4), R(1, 4), 0]]
rkf23_3.weights = [R(1, 2), R(1, 2), 0]
rkf23_3.correctorweights = [R(1, 6), R(1 , 6), R(2, 3)]
rkf23_3.nodes = [0, 1, R(1, 2)]
rkf23_3.details = '''Fehlberg's RK2(3)3, Table XII [3].'''
rkf23_3.order = 2

# Bogacki-Shampine RK3(2)4F
rk3_2_4f = EmbeddedExplicitRKMethod()
rk3_2_4f.matrix = [[0, 0, 0, 0],
                   [R(1, 2), 0, 0, 0],
                   [0, R(3, 4), 0, 0],
                   [R(2, 9), R(1, 3), R(4, 9), 0]]
rk3_2_4f.weights = [R(2, 9), R(1, 3), R(4, 9), 0]
rk3_2_4f.correctorweights = [R(7, 24), R(1, 4), R(1, 3), R(1, 8)]
rk3_2_4f.nodes = [0, R(1, 2), R(3, 4), 1]
rk3_2_4f.details = '''Bogacki-Shampine RK3(2)4F [8].'''
rk3_2_4f.order = 3

# Fehlberg's RK3(4)5F (Formula 1)
rkf34_f1 = EmbeddedExplicitRKMethod()
rkf34_f1.matrix = [[0, 0, 0, 0, 0],
                   [R(1, 4), 0, 0, 0, 0],
                   [R(4, 81), R(32, 81), 0, 0, 0],
                   [R(57, 98), -R(432, 343), R(1053, 686), 0, 0],
                   [R(1, 6), 0, R(27, 52), R(49, 156), 0]]
rkf34_f1.weights = [R(1, 6), 0, R(27, 52), R(49, 156), 0]
rkf34_f1.correctorweights = [R(43, 288), 0, R(243, 416), R(343, 1872), R(1, 12)]
rkf34_f1.nodes = [0, R(1, 4), R(4, 9), R(6, 7), 1]
rkf34_f1.details = '''Fehlberg's RK3(4)5F (Formula 1), Table VII [3].'''
rkf34_f1.order = 3

# Fehlberg's RK3(4)5F (Formula 2)
rkf34_f2 = EmbeddedExplicitRKMethod()
rkf34_f2.matrix = [[0, 0, 0, 0, 0],
                   [R(2, 7), 0, 0, 0, 0],
                   [R(77, 900), R(343, 900), 0, 0, 0],
                   [R(805, 1444), -R(77175, 54872), R(97125, 54872), 0, 0],
                   [R(79, 490), 0, R(2175, 3626), R(2166, 9065), 0]]
rkf34_f2.weights = [R(79, 490), 0, R(2175, 3626), R(2166, 9065), 0]
rkf34_f2.correctorweights = [R(229, 1470), 0, R(1125, 1813), R(13718, 81585), R(1, 18)]
rkf34_f2.nodes = [0, R(2, 7), R(7, 15), R(35, 38), 1]
rkf34_f2.details = '''Fehlberg's RK3(4)5F (Formula 2), Table VIII [3].'''
rkf34_f2.order = 3

# Cash-Karp RK3(2)4
rkck32 = EmbeddedExplicitRKMethod()
rkck32.matrix = [[0, 0, 0, 0],
                 [R(1, 5), 0, 0, 0],
                 [R(3, 40), R(9, 40), 0, 0],
                 [R(3, 10), -R(9, 10), R(6, 5), 0]]
rkck32.weights = [R(19, 54), 0, -R(10, 27), R(55, 54)]
rkck32.correctorweights = [-R(3, 2), R(5, 2), 0, 0]
rkck32.nodes = [0, R(1, 5), R(3, 10), R(3, 5)]
rkck32.details = '''Cash-Karp RK3(2)4 [10].'''
rkck32.order = 3

# Fehlberg's RK4(5)6 (Formula 2)
rkf45 = EmbeddedExplicitRKMethod()
rkf45.matrix = [[0, 0, 0, 0, 0, 0],
                [R(1, 4), 0, 0, 0, 0, 0],
                [R(3, 32), R(9, 32), 0, 0, 0, 0],
                [R(1932, 2197), -R(7200, 2197), R(7296, 2197), 0, 0, 0],
                [R(439, 216), -8, R(3680, 513), -R(845, 4104), 0, 0],
                [-R(8, 27), 2, -R(3544, 2565), R(1859, 4104), -R(11, 40), 0]]
rkf45.nodes = [0, R(1, 4), R(3, 8), R(12, 13), 1, R(1, 2)]
rkf45.weights = [R(25, 216), 0, R(1408, 2565), R(2197, 4104), -R(1, 5), 0]
rkf45.correctorweights = [R(16, 135), 0, R(6656, 12825), R(28561, 56430), -R(9, 50), R(2, 55)]
rkf45.details = '''Fehlberg's RK4(5)6 (Formula 2), Table III [3].'''
rkf45.order = 4

# Cash-Karp RK4(3)6
rkck43 = EmbeddedExplicitRKMethod()
rkck43.matrix = [[0, 0, 0, 0, 0, 0],
                 [R(1, 5), 0, 0, 0, 0, 0],
                 [R(3, 40), R(9, 40), 0, 0, 0, 0],
                 [R(3, 10), -R(9, 10), R(6, 5), 0, 0, 0],
                 [-R(11, 54), R(5, 2), -R(70, 27), R(35, 27), 0, 0],
                 [R(1631, 55296), R(175, 512), R(575, 13824), R(44275, 110592), R(253, 4096), 0]]
rkck43.nodes = [0, R(1, 5), R(3, 10), R(3, 5), 1, R(7, 8)]
rkck43.weights = [R(2825, 27648), 0, R(18575, 48384), R(13525, 55296), R(277, 14336), R(1, 4)]
rkck43.correctorweights = [R(19, 54), 0, -R(10, 27), R(55, 54), 0, 0]
rkck43.details = '''Cash-Karp RK4(3)6 [10].'''
rkck43.order = 4

# Fehlberg's RK4(5)6 (Formula 1)
rkf45_f1 = EmbeddedExplicitRKMethod()
rkf45_f1.matrix = [[0, 0, 0, 0, 0, 0],
                   [R(2, 9), 0, 0, 0, 0, 0],
                   [R(1, 12), R(1, 4), 0, 0, 0, 0],
                   [R(69, 128), -R(243, 128), R(135, 64), 0, 0, 0],
                   [-R(17, 12), R(27, 4), -R(27, 5), R(16, 15), 0, 0],
                   [R(65, 432), -R(5, 16), R(13, 16), R(4, 27), R(5, 144), 0]]
rkf45_f1.nodes = [0, R(2, 9), R(1, 3), R(3, 4), 1, R(5, 6)]
rkf45_f1.weights = [R(1, 9), 0, R(9, 20), R(16, 45), R(1, 12), 0]
rkf45_f1.correctorweights = [R(47, 450), 0, R(12, 25), R(32, 225), R(1, 30), R(6, 25)]
rkf45_f1.details = '''Fehlberg's RK4(5)6 (Formula 1), Table II [3].'''
rkf45_f1.order = 4

# Sarafyan's RK4(5)6
rk4_5_6 = EmbeddedExplicitRKMethod()
rk4_5_6.matrix = [[0, 0, 0, 0, 0, 0],
                  [R(1, 2), 0, 0, 0, 0, 0],
                  [R(1, 4), R(1, 4), 0, 0, 0, 0],
                  [0, -1, 2, 0, 0, 0],
                  [R(7, 27), R(10, 27), 0, R(1, 27), 0, 0],
                  [R(28, 625), -R(1, 5), R(546, 625), R(54, 625), -R(378, 625), 0]]
rk4_5_6.nodes = [0, R(1, 2), R(1, 2), 1, R(2, 3), R(1, 5)]
rk4_5_6.weights = [R(1, 6), 0, R(2, 3), R(1 , 6), 0, 0]
rk4_5_6.correctorweights = [R(1, 24), 0, 0, R(5, 48), R(27, 56), R(125, 336)]
rk4_5_6.details = '''Sarafyan's RK4(5)6, Table IV [3].'''
rk4_5_6.order = 4

# Dormand-Prince RK5(4)7FM
dopri54fm = EmbeddedExplicitRKMethod()
dopri54fm.matrix = [[0, 0, 0, 0, 0, 0, 0],
                    [R(1, 5), 0, 0, 0, 0, 0, 0],
                    [R(3, 40), R(9, 40), 0, 0, 0, 0, 0],
                    [R(44, 45), -R(56, 15), R(32, 9), 0, 0, 0, 0],
                    [R(19372, 6561), -R(25360, 2187), R(64448, 6561), -R(212, 729), 0, 0, 0],
                    [R(9017, 3168), -R(355, 33), R(46732, 5247), R(49, 176), -R(5103, 18656), 0, 0],
                    [R(35, 384), 0, R(500, 1113), R(125, 192), -R(2187, 6784), R(11, 84), 0]]
dopri54fm.nodes = [0, R(1, 5), R(3, 10), R(4, 5), R(8, 9), 1, 1]
dopri54fm.weights = [R(35, 384), 0, R(500, 1113), R(125, 192), -R(2187, 6784), R(11, 84), 0]
dopri54fm.correctorweights = [R(5179, 57600), 0, R(7571, 16695), R(393, 640), -R(92097, 339200), R(187, 2100), R(1, 40)]
dopri54fm.details = '''Dormand-Prince RK5(4)7FM [5].'''
dopri54fm.order = 5

# Higham-Hall RK5(4)7FEq3
rk5_4_7f_eq3 = EmbeddedExplicitRKMethod()
rk5_4_7f_eq3.matrix = [[0, 0, 0, 0, 0, 0, 0],
                       [R(11, 45), 0, 0, 0, 0, 0, 0],
                       [R(11, 120), R(11, 40), 0, 0, 0, 0, 0],
                       [R(106865, 87808), -R(408375, 87808), R(193875, 43904), 0, 0, 0, 0],
                       [R(79503, 121000), -R(1053, 440), R(147753, 56870), R(27048, 710875), 0, 0, 0],
                       [R(89303, 78045), -R(2025, 473), R(994650, 244541), -R(2547216, 28122215), R(475, 2967), 0, 0],
                       [R(1247, 10890), 0, R(57375, 108053), -R(1229312, 1962015), R(125, 207), R(43, 114), 0]]
rk5_4_7f_eq3.nodes = [0, R(11, 45), R(11, 30), R(55, 56), R(9, 10), 1, 1]
rk5_4_7f_eq3.weights = [R(1247, 10890), 0, R(57375, 108053), -R(1229312, 1962015), R(125, 207), R(43, 114), 0]
rk5_4_7f_eq3.correctorweights = [R(21487, 185130), 0, R(963225, 1836901), -R(39864832, 33354255), R(2575, 3519),
                                 R(4472, 4845), -R(1, 10)]
rk5_4_7f_eq3.details = '''Higham-Hall RK5(4)7FEq3 [9].'''
rk5_4_7f_eq3.order = 5

# Higham-Hall RK5(4)7FEq1
rk5_4_7f_eq1 = EmbeddedExplicitRKMethod()
rk5_4_7f_eq1.matrix = [[0, 0, 0, 0, 0, 0, 0],
                       [R(2, 9), 0, 0, 0, 0, 0, 0],
                       [R(1, 12), R(1, 4), 0, 0, 0, 0, 0],
                       [R(1, 8), 0, R(3, 8), 0, 0, 0, 0],
                       [R(91, 500), -R(27, 100), R(78, 125), R(8, 125), 0, 0, 0],
                       [-R(11, 20), R(27, 20), R(12, 5), -R(36, 5), 5, 0, 0],
                       [R(1, 12), 0, R(27, 32), -R(4, 3), R(125, 96), R(5, 48), 0]]
rk5_4_7f_eq1.nodes = [0, R(2, 9), R(1, 3), R(1, 2), R(3, 5), 1, 1]
rk5_4_7f_eq1.weights = [R(1, 12), 0, R(27, 32), -R(4, 3), R(125, 96), R(5, 48), 0]
rk5_4_7f_eq1.correctorweights = [R(2, 15), 0, R(27, 80), -R(2, 15), R(25, 48), R(1, 24), R(1, 10)]
rk5_4_7f_eq1.details = '''Higham-Hall RK5(4)7FEq1 [9].'''
rk5_4_7f_eq1.order = 5

# Higham-Hall RK5(4)7FEq2
rk5_4_7f_eq2 = EmbeddedExplicitRKMethod()
rk5_4_7f_eq2.matrix = [[0, 0, 0, 0, 0, 0, 0],
                       [R(2, 13), 0, 0, 0, 0, 0, 0],
                       [R(3, 52), R(9, 52), 0, 0, 0, 0, 0],
                       [R(12955, 26244), -R(15925, 8748), R(12350, 6561), 0, 0, 0, 0],
                       [-R(10383, 52480), R(13923, 10496), -R(176553, 199424), R(505197, 997120), 0, 0, 0],
                       [R(1403, 7236), -R(429, 268), R(733330, 309339), -R(7884, 8911), R(104960, 113967), 0, 0],
                       [R(181, 2700), 0, R(656903, 1846800), R(19683, 106400), R(34112, 110565), R(67, 800), 0]]
rk5_4_7f_eq2.nodes = [0, R(2, 13), R(3, 13), R(5, 9), R(3, 4), 1, 1]
rk5_4_7f_eq2.weights = [R(181, 2700), 0, R(656903, 1846800), R(19683, 106400), R(34112, 110565), R(67, 800), 0]
rk5_4_7f_eq2.correctorweights = [R(11377, 154575), 0, R(35378291, 105729300), R(343359, 1522850), R(535952, 1947645),
                                 R(134, 17175), R(1, 12)]
rk5_4_7f_eq2.details = '''Higham-Hall RK5(4)7FEq2 [9].'''
rk5_4_7f_eq2.order = 5

# Cash-Karp RK5(4)6
rkck54 = EmbeddedExplicitRKMethod()
rkck54.matrix = [[0, 0, 0, 0, 0, 0],
                 [R(1, 5), 0, 0, 0, 0, 0],
                 [R(3, 40), R(9, 40), 0, 0, 0, 0],
                 [R(3, 10), -R(9, 10), R(6, 5), 0, 0, 0],
                 [-R(11, 54), R(5, 2), -R(70, 27), R(35, 27), 0, 0],
                 [R(1631, 55296), R(175, 512), R(575, 13824), R(44275, 110592), R(253, 4096), 0]]
rkck54.nodes = [0, R(1, 5), R(3, 10), R(3, 5), 1, R(7, 8)]
rkck54.weights = [R(2825, 27648), 0, R(18575, 48384), R(13525, 55296), R(277, 14336), R(1, 4)]
rkck54.correctorweights = [R(37, 348), 0, R(250, 621), R(125, 594), 0, R(512, 1771)]
rkck54.details = '''Cash-Karp RK5(4)6 [10].'''
rkck54.order = 5

# Dormand-Prince RK5(4)7FC
dopri54fc = EmbeddedExplicitRKMethod()
dopri54fc.matrix = [[0, 0, 0, 0, 0, 0, 0],
                    [R(1, 5), 0, 0, 0, 0, 0, 0],
                    [R(3, 40), R(9, 40), 0, 0, 0, 0, 0],
                    [R(264, 2197), -R(90, 2197), R(840, 2197), 0, 0, 0, 0],
                    [R(932, 3645), -R(14, 27), R(3256, 5103), R(7436, 25515), 0, 0, 0],
                    [-R(367, 513), R(30, 19), R(9940, 5643), -R(29575, 8208), R(6615, 3344), 0, 0],
                    [R(35, 432), 0, R(8500, 14553), -R(28561, 84672), R(405, 704), R(19, 196), 0]]
dopri54fc.nodes = [0, R(1, 5), R(3, 10), R(6, 13), R(2, 3), 1, 1]
dopri54fc.weights = [R(35, 432), 0, R(8500, 14553), -R(28561, 84672), R(405, 704), R(19, 196), 0]
dopri54fc.correctorweights = [R(11, 108), 0, 6250, 14553, R(2197, 21168), R(81, 176), R(171, 1960), R(1, 40)]
dopri54fc.details = '''Dormand-Prince RK5(4)7FC [7].'''
dopri54fc.order = 5

# Dormand-Prince RK5(4)7FS
dopri54fs = EmbeddedExplicitRKMethod()
dopri54fs.matrix = [[0, 0, 0, 0, 0, 0, 0],
                    [R(2, 9), 0, 0, 0, 0, 0, 0],
                    [R(1, 12), R(1, 4), 0, 0, 0, 0, 0],
                    [R(55, 325), -R(25, 108), R(50, 81), 0, 0, 0, 0],
                    [R(83, 330), -R(13, 22), R(61, 66), R(9, 100), 0, 0, 0],
                    [-R(19, 28), R(9, 4), R(1, 7), -R(27, 7), R(22, 7), 0, 0],
                    [R(19, 200), 0, R(3, 5), -R(243, 400), R(33, 40), R(7, 80), 0]]
dopri54fs.nodes = [0, R(2, 9), R(1, 3), R(5, 9), R(2, 3), 1, 1]
dopri54fs.weights = [R(19, 200), 0, R(3, 5), -R(243, 400), R(33, 40), R(7, 80), 0]
dopri54fs.correctorweights = [R(431, 5000), 0, R(333, 500), -R(7857, 10000), R(957, 1000), R(193, 2000), -R(1, 50)]
dopri54fs.details = '''Dormand-Prince RK5(4)7FS [5].'''
dopri54fs.order = 5

# Dormand-Prince RK5(4)6M
dopri54m = EmbeddedExplicitRKMethod()
dopri54m.matrix = [[0, 0, 0, 0, 0, 0],
                   [R(1, 5), 0, 0, 0, 0, 0],
                   [R(3, 40), R(9, 40), 0, 0, 0, 0],
                   [R(3, 10), -R(9, 10), R(6, 5), 0, 0, 0],
                   [R(226, 729), -R(25, 27), R(880, 729), R(55, 729), 0, 0],
                   [-R(181, 270), R(5, 2), -R(266, 297), -R(91, 27), R(189, 55), 0]]
dopri54m.nodes = [0, R(1, 5), R(3, 10), R(3, 5), R(2, 3), 1]
dopri54m.weights = [R(19, 216), 0, R(1000, 2079), -R(125, 216), R(81, 88), R(5, 56)]
dopri54m.correctorweights = [R(31, 540), 0, R(190, 297), -R(145, 108), R(351, 220), R(1, 20)]
dopri54m.details = '''Dormand-Prince RK5(4)6M [5].'''
dopri54m.order = 5

# Verner's RK5(6)8
rk56 = EmbeddedExplicitRKMethod()
rk56.matrix = [[0, 0, 0, 0, 0, 0, 0, 0],
               [R(1, 18), 0, 0, 0, 0, 0, 0, 0],
               [-R(1, 12), R(1, 4), 0, 0, 0, 0, 0, 0],
               [-R(2, 81), R(4, 27), R(8, 81), 0, 0, 0, 0, 0],
               [R(40, 33), -R(4, 11), -R(56, 11), R(54, 11), 0, 0, 0, 0],
               [-R(369, 73), R(72, 73), R(5380, 219), -R(12285, 584), R(2695, 1752), 0, 0, 0],
               [-R(8716, 891), R(656, 297), R(39520, 891), -R(416, 11), R(52, 27), 0, 0, 0],
               [R(3015, 256), -R(9, 4), -R(4219, 78), R(5985, 128), -R(539, 384), 0, R(693, 3328), 0]]
rk56.nodes = [0, R(1, 18), R(1 , 6), R(2, 9), R(2, 3), 1, R(8, 9), 1]
rk56.weights = [R(3, 80), 0, R(4, 25), R(243, 1120), R(77, 160), R(73, 700), 0, 0]
rk56.correctorweights = [R(57, 640), 0, -R(16, 65), R(1377, 2240), R(121, 320), 0, R(891, 8320), R(2, 35)]
rk56.details = '''Verner's RK5(6)8, Table V [4].'''
rk56.order = 5

# Fehlberg's RK5(6)8
rkf56 = EmbeddedExplicitRKMethod()
rkf56.matrix = [[0, 0, 0, 0, 0, 0, 0, 0],
                [R(1, 6), 0, 0, 0, 0, 0, 0, 0],
                [R(4, 75), R(16, 75), 0, 0, 0, 0, 0, 0],
                [R(5, 6), -R(8, 3), R(5, 2), 0, 0, 0, 0, 0],
                [-R(8, 5), R(144, 25), -4, R(16, 25), 0, 0, 0, 0],
                [R(361, 320), -R(18, 5), R(407, 128), -R(11, 80), R(55, 128), 0, 0, 0],
                [-R(11, 640), 0, R(11, 256), -R(11, 160), R(11, 256), 0, 0, 0],
                [R(93, 640), -R(18, 5), R(803, 256), -R(11, 160), R(99, 256), 0, 1, 0]]
rkf56.nodes = [0, R(1, 6), R(4, 15), R(2, 3), R(4, 5), 1, 0, 1]
rkf56.weights = [R(31, 384), 0, R(1125, 2816), R(9, 32), R(125, 768), R(5, 66), 0, 0]
rkf56.correctorweights = [R(7, 1408), 0, R(1125, 2816), R(9, 32), R(125, 768), 0, R(5, 66), R(5, 66)]
rkf56.details = '''Fehlberg's RK5(6)8, Table II in [2].'''
rkf56.order = 5

# Dormand-Prince RK6(5)8S
dopri65s = EmbeddedExplicitRKMethod()
dopri65s.matrix = [[0, 0, 0, 0, 0, 0, 0, 0],
                   [R(1, 4), 0, 0, 0, 0, 0, 0, 0],
                   [R(3, 25), R(9, 50), 0, 0, 0, 0, 0, 0],
                   [R(102, 343), -R(1368, 343), R(1560, 343), 0, 0, 0, 0, 0],
                   [-R(3, 100), R(36, 25), -R(12, 13), R(147, 1300), 0, 0, 0, 0],
                   [R(37, 225), -R(48, 25), R(872, 351), R(49, 1053), R(2, 81), 0, 0, 0],
                   [R(11, 648), R(14, 3), -R(10193, 2106), -R(30331, 50544), R(1025, 1944), R(59, 48), 0, 0],
                   [R(796, 1701), -R(352, 63), R(134093, 22113), -R(78281, 75816), -R(9425, 20412), R(781, 504), 0, 0]]
dopri65s.nodes = [0, R(1, 4), R(3, 10), R(6, 7), R(3, 5), R(4, 5), 1, 1]
dopri65s.weights = [R(29, 324), 0, R(3400, 7371), -R(16807, 25272), -R(125, 1944), R(25, 24), R(1, 84), R(1, 8)]
dopri65s.correctorweights = [R(2041, 21600), 0, R(748, 1755), -R(2401, 46800), R(11, 108), R(59, 160), R(3, 50), 0]
dopri65s.details = '''Dormand-Prince RK6(5)8S [7].'''
dopri65s.order = 6

# Dormand-Prince RK6(5)8C
dopri65c = EmbeddedExplicitRKMethod()
dopri65c.matrix = [[0, 0, 0, 0, 0, 0, 0, 0],
                   [R(1, 10), 0, 0, 0, 0, 0, 0, 0],
                   [R(1, 36), R(5, 36), 0, 0, 0, 0, 0, 0],
                   [R(10, 243), R(20, 243), R(8, 81), 0, 0, 0, 0, 0],
                   [R(4047, 5500), -R(18, 55), -R(4212, 1375), R(17901, 5500), 0, 0, 0, 0],
                   [-R(5587, 4125), R(24, 55), R(9576, 1375), -R(140049, 23375), R(38, 51), 0, 0, 0],
                   [R(12961, 2376), -R(35, 33), -R(160845, 5434), R(1067565, 38896), -R(103375, 47736), R(32875, 35568),
                    0, 0],
                   [R(702799, 199584), -R(1865, 2772), -R(2891375, 152152), R(19332955, 1089088), -R(5356375, 4009824),
                    R(2207875, 2987712), 0, 0]]
dopri65c.nodes = [0, R(1, 10), R(1 , 6), R(2, 9), R(3, 5), R(4, 5), 1, 1]
dopri65c.weights = [R(1, 12), 0, -R(216, 1235), R(6561, 12376), R(1375, 5304), R(1375, 5928), -R(5, 168), R(1, 10)]
dopri65c.correctorweights = [R(163, 1440), 0, -R(2628, 6175), R(13851, 17680), R(1525, 7956), R(6575, 23712), R(3, 50),
                             0]
dopri65c.details = '''Dormand-Prince RK6(5)8C [7].'''
dopri65c.order = 6

# Dormand-Prince RK6(5)8M
dopri65m = EmbeddedExplicitRKMethod()
dopri65m.matrix = [[0, 0, 0, 0, 0, 0, 0, 0],
                   [R(1, 10), 0, 0, 0, 0, 0, 0, 0],
                   [-R(2, 81), R(20, 81), 0, 0, 0, 0, 0, 0],
                   [R(615, 1372), -R(270, 343), R(1053, 1372), 0, 0, 0, 0, 0],
                   [R(3243, 5500), -R(54, 55), R(50949, 71500), R(4998, 17875), 0, 0, 0, 0],
                   [-R(26492, 37125), R(72, 55), R(2808, 23375), -R(24206, 37125), R(338, 459), 0, 0, 0],
                   [R(5561, 2376), -R(35, 11), -R(24117, 31603), R(899983, 200772), -R(5225, 1836), R(3925, 4056), 0,
                    0],
                   [R(465467, 266112), -R(2945, 1232), -R(5610201, 14158144), R(10513573, 3212352), -R(424325, 205632),
                    R(376225, 454272), 0, 0]]
dopri65m.nodes = [0, R(1, 10), R(2, 9), R(3, 7), R(3, 5), R(4, 5), 1, 1]
dopri65m.weights = [R(61, 864), 0, R(98415, 321776), R(16807, 146016), R(1375, 7344), R(1375, 5408), -R(37, 1120),
                    R(1, 10)]
dopri65m.correctorweights = [R(821, 10800), 0, R(19683, 71825), R(175273, 912600), R(395, 3672), R(785, 2704), R(3, 50),
                             0]
dopri65m.details = '''Dormand-Prince RK6(5)8M [7].'''
dopri65m.order = 6

# Verner's RK6(7)10
rk6_7_10_verner = EmbeddedExplicitRKMethod()
rk6_7_10_verner.matrix = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [R(1, 12), 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [0, R(1, 6), 0, 0, 0, 0, 0, 0, 0, 0],
                          [R(1, 16), 0, R(3, 16), 0, 0, 0, 0, 0, 0, 0],
                          [R(21, 16), 0, -R(81, 16), R(9, 2), 0, 0, 0, 0, 0, 0],
                          [R(1344688, 250563), 0, -R(1709184, 83521), R(1365632, 83521), -R(78208, 250563), 0, 0, 0, 0,
                           0],
                          [-R(559, 384), 0, 6, -R(204, 47), R(14, 39), -R(4913, 78208), 0, 0, 0, 0],
                          [-R(625, 224), 0, 12, -R(456, 47), R(48, 91), R(14739, 136864), R(6, 7), 0, 0, 0],
                          [-R(12253, 99144), 0, R(16, 27), R(16, 459), R(29072, 161109), -R(2023, 75816), R(112, 12393),
                           0, 0, 0],
                          [R(30517, 2512), 0, -R(7296, 157), R(268728, 7379), R(2472, 2041), -R(3522621, 10743824),
                           R(132, 157), 0,-R(12393, 4396), 0]]
rk6_7_10_verner.nodes = [0, R(1, 12), R(1, 6), R(1, 4), R(3, 4), R(16, 17), R(1, 2), 1, R(2, 3), 1]
rk6_7_10_verner.weights = [R(7, 90), 0, 0, R(16, 45), R(16, 45), 0, R(2, 15), R(7, 90), 0, 0]
rk6_7_10_verner.correctorweights = [R(2881, 40320), 0, 0, R(1216, 2961), -R(2624, 4095), R(24137569, 57482880),
                                    -R(4, 21), 0, R(4131, 3920), -R(157, 1260)]
rk6_7_10_verner.details = '''Verner's RK6(7)10 [4].'''
rk6_7_10_verner.order = 6

# Fehlberg's RK6(7)10
rkf67 = EmbeddedExplicitRKMethod()
rkf67.matrix = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [R(2, 33), 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, R(4, 33), 0, 0, 0, 0, 0, 0, 0, 0],
                [R(1, 22), 0, R(3, 22), 0, 0, 0, 0, 0, 0, 0],
                [R(43, 64), 0, -R(165, 64), R(77, 32), 0, 0, 0, 0, 0, 0],
                [-R(2383, 486), 0, R(1067, 54), -R(26312, 1701), R(2176, 1701), 0, 0, 0, 0, 0],
                [R(10077, 4802), 0, -R(5643, 686), R(116259, 16807), -R(6420, 16807), R(1053, 2401), 0, 0, 0, 0],
                [-R(733, 176), 0, R(141, 8), -R(335763, 23296), R(216, 77), -R(4617, 2816), R(7203, 9152), 0, 0, 0],
                [R(15, 352), 0, 0, -R(5445, 46592), R(18, 77), -R(1215, 5632), R(1029, 18304), 0, 0, 0],
                [-R(1833, 352), 0, R(141, 8), -R(51237, 3584), R(18, 7), -R(729, 512), R(1029, 1408), 0, 1, 0]]
rkf67.nodes = [0, R(2, 33), R(4, 33), R(2, 11), R(1, 2), R(2, 3), R(6, 7), 1, 0, 1]
rkf67.weights = [R(77, 1440), 0, 0, R(1771561, 6289920), R(32, 105), R(243, 2560), R(16807, 74880), R(11, 270), 0, 0]
rkf67.correctorweights = [R(11, 864), 0, 0, R(1771561, 6289920), R(32, 105), R(243, 2560), R(16807, 74880), 0,
                          R(11, 270), R(11, 270)]
rkf67.details = '''Fehlberg's RK6(7)10 [2].'''
rkf67.order = 6

# Verner's RK7(8)13
rk7_8_13_verner = EmbeddedExplicitRKMethod()
rk7_8_13_verner.matrix = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [R(1, 4), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [R(5, 72), R(1, 72), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [R(1, 32), 0, R(3, 32), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [R(106, 125), 0, -R(408, 125), R(352, 125), 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [R(1, 48), 0, 0, R(8, 33), R(125, 528), 0, 0, 0, 0, 0, 0, 0, 0],
                          [-R(1263, 2401), 0, 0, R(39936, 26411), -R(64125, 26411), R(5520, 2401), 0, 0, 0, 0, 0, 0, 0],
                          [R(37, 392), 0, 0, 0, R(1625, 9408), -R(2, 15), R(61, 6720), 0, 0, 0, 0, 0, 0],
                          [R(17176, 25515), 0, 0, -R(47104, 25515), R(1325, 504), -R(41792, 25515), R(20237, 145800),
                           R(4312, 6075), 0, 0, 0, 0, 0],
                          [-R(23834, 180075), 0, 0, -R(77824, 1980825), -R(636635, 633864), R(254048, 300125),
                           -R(183, 7000), R(8, 11), -R(324, 3773), 0, 0, 0, 0],
                          [R(12733, 7600), 0, 0, -R(20032, 5225), R(456485, 80256), -R(42599, 7125), R(339227, 912000),
                           -R(1029, 4180), R(1701, 1408), R(5145, 2432), 0, 0, 0],
                          [-R(27061, 204120), 0, 0, R(40448, 280665), -R(1353775, 1197504), R(17662, 25515),
                           -R(71687, 1166400), R(98, 225), R(1, 16), R(3773, 11664), 0, 0, 0],
                          [R(11203, 8680), 0, 0, -R(38144, 11935), R(2354425, 458304), -R(84046, 16275),
                           R(673309, 1636800), R(4704, 8525), R(9477, 10912), -R(1029, 992), 0, R(729, 341), 0]]
rk7_8_13_verner.nodes = [0, R(1, 4), R(1, 12), R(1, 8), R(2, 5), R(1, 2), R(6, 7), R(1, 7), R(2, 3), R(2, 7), 1,
                         R(1, 3), 1]
rk7_8_13_verner.weights = [R(13, 288), 0, 0, 0, 0, R(32, 125), R(31213, 144000), R(2401, 12375), R(1701, 14080),
                           R(2401, 19200), R(19, 950), 0, 0]
rk7_8_13_verner.correctorweights = [R(31, 720), 0, 0, 0, 0, R(16, 75), R(16807, 79200), R(16807, 79200), R(243, 1760),
                                    0, 0, R(243, 1760), R(31, 720)]
rk7_8_13_verner.details = '''Verner's RK7(8)13 [4].'''
rk7_8_13_verner.order = 7

# Fehlberg's RK7(8)13
rkf78 = EmbeddedExplicitRKMethod()
rkf78.matrix = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [R(2, 27), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [R(1, 36), R(1, 12), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [R(1, 24), 0, R(1, 8), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [R(5, 12), 0, -R(25, 16), R(25, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [R(1, 20), 0, 0, R(1, 4), R(1, 5), 0, 0, 0, 0, 0, 0, 0, 0],
                   [-R(25, 108), 0, 0, R(125, 108), -R(65, 27), R(125, 54), 0, 0, 0, 0, 0, 0, 0],
                   [R(31, 300), 0, 0, 0, R(61, 225), -R(2, 9), R(13, 900), 0, 0, 0, 0, 0, 0],
                   [2, 0, 0, -R(53, 6), R(704, 45), -R(107, 9), R(67, 90), 3, 0, 0, 0, 0, 0],
                   [-R(91, 108), 0, 0, R(23, 108), -R(976, 135), R(311, 54), -R(19, 60), R(17, 6), -R(1, 12), 0, 0, 0,
                    0],
                   [R(2383, 4100), 0, 0, -R(341, 164), R(4496, 1025), -R(301, 82), R(2133, 4100), R(45, 82), R(45, 164),
                    R(18, 41), 0, 0, 0],
                   [R(3, 205), 0, 0, 0, 0, -R(6, 41), -R(3, 205), -R(3, 41), R(3, 41), R(6, 41), 0, 0, 0],
                   [R(1777, 4100), 0, 0, -R(341, 164), R(4496, 1025), -R(289, 82), R(2193, 4100), R(51, 82), R(33, 164),
                    R(12, 41), 0, 1, 0]]
rkf78.nodes = [0, R(2, 27), R(1, 9), R(1 , 6), R(5, 12), R(1, 2), R(5, 6), R(1 , 6), R(2, 3), R(1, 3), 1, 0, 1]
rkf78.weights = [R(41, 840), 0, 0, 0, 0, R(34, 105), R(9, 35), R(9, 35), R(9, 280), R(9, 280), R(41, 840), 0, 0]
rkf78.correctorweights = [0, 0, 0, 0, 0, R(34, 105), R(9, 35), R(9, 35), R(9, 280), R(9, 280), 0, R(41, 840),
                          R(41, 840)]
rkf78.details = '''Fehlberg's RK7(8)13 [2].'''
rkf78.order = 7

# Dormand-Prince RK8(7)13M
rk8_7_13m = EmbeddedExplicitRKMethod()
rk8_7_13m.matrix = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [R(1, 18), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [R(1, 48), R(1, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [R(1, 32), 0, R(3, 32), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [R(5, 16), 0, -R(75, 64), R(75, 64), 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [R(3, 80), 0, 0, R(3, 16), R(3, 20), 0, 0, 0, 0, 0, 0, 0, 0],
                    [R(29443841, 614563906), 0, 0, R(77736538, 692538347), -R(28693883, 1125000000),
                     R(23124283, 1800000000), 0, 0, 0, 0, 0, 0, 0],
                    [R(16016141, 946692911), 0, 0, R(61564180, 158732637), R(22789713, 633445777),
                     R(545815736, 2771057229), -R(180193667, 1043307555), 0, 0, 0, 0, 0, 0],
                    [R(39632708, 573591083), 0, 0, -R(433636366, 683701615), -R(421739975, 2616292301),
                     R(100302831, 723423059), R(790204164, 839813087), R(800635310, 3783071287), 0, 0, 0, 0, 0],
                    [R(246121993, 1340847787), 0, 0, -R(37695042795, 15268766246), -R(309121744, 1061227803),
                     -R(12992083, 490766935), R(6005943493, 2108947869), R(393006217, 1396673457),
                     R(123872331, 1001029789), 0, 0, 0, 0],
                    [-R(1028468189, 846180014), 0, 0, R(8478235783, 508512852), R(1311729495, 1432422823),
                     -R(10304129995, 1701304382), -R(48777925059, 3047939560), R(15336726248, 1032824649),
                     -R(45442868181, 3398467696), R(3065993473, 597172653), 0, 0, 0],
                    [R(185892177, 718116043), 0, 0, -R(3185094517, 667107341), -R(477755414, 1098053517),
                     -R(703635378, 230739211), R(5731566787, 1027545527), R(5232866602, 850066563),
                     -R(4093664535, 808688257), R(3962137247, 1805957418), R(65686358, 487910083), 0, 0],
                    [R(403863854, 491063109), 0, 0, -R(5068492393, 434740067), -R(411421997, 543043805),
                     R(652783627, 914296604), R(11173962825, 925320556), -R(13158990841, 6184727034),
                     R(3936647629, 1978049680), R(248638103, 1413531060), 0, 0]]
rk8_7_13m.nodes = [0, R(1, 18), R(1, 12), R(1, 8), R(5, 16), R(3, 8), R(59, 400), R(93, 200), R(5490023248, 9719169821),
                   R(13, 20), R(1201146811, 1299019798), 1, 1]
rk8_7_13m.weights = [R(14005451, 335480064), 0, 0, 0, 0, -R(59238493, 1068277825), R(181606767, 758867731),
                     R(561292985, 797845732), -R(1041891430, 1371343529), R(760417239, 1151165299),
                     R(118820643, 751138087), -R(528747749, 2220607170), R(1, 4)]
rk8_7_13m.correctorweights = [R(13451932, 455176623), 0, 0, 0, 0, -R(808719846, 976000145), R(1757004468, 5645159321),
                              R(656045339, 265891186), -R(3867574721, 1518517206), R(465885868, 322736535),
                              R(53011238, 667516719), R(2, 45), 0]
rk8_7_13m.details = '''Dormand-Prince RK8(7)13M [7].'''
rk8_7_13m.order = 8


f = lambda a, b: a + b * sqrt(6)
# Verner's RK8(9)16
rk8_9_16 = EmbeddedExplicitRKMethod()
rk8_9_16.matrix = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [R(1, 12), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [R(1, 27), R(2, 27), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [R(1, 24), 0, R(1, 8), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [(4 +sqrt(6)*94)*R(1,375), 0, (-94 -sqrt(6)*84)*R(1,125), (328 +sqrt(6)*208)*R(1,375), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [(9 -sqrt(6))*R(1,150), 0, 0, (312 +sqrt(6)*32)*R(1,1425), (69 +sqrt(6)*29)*R(1,570), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [(927 -sqrt(6)*347)*R(1,1250), 0, 0, (-16248 +sqrt(6)*7328)*R(1,9375), (-489+ 179* sqrt(6))*R(1,3750), (14268-sqrt(6)*5798)*R(1,9375), 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0],
                   [R(2, 27), 0, 0, 0, 0, (16 -sqrt(6)*1)*R(1,54), (16+sqrt(6)* 1)*R(1,54), 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [R(19, 256), 0, 0, 0, 0, (118 -sqrt(6)*23)*R(1,512), (118 +sqrt(6)*23)*R(1,512), -R(9, 256), 0, 0, 0, 0, 0, 0, 0, 0],
                   [R(11, 144), 0, 0, 0, 0, (266 -sqrt(6)*1)*R(1,864), (266+sqrt(6)* 1)*R(1,864), -R(1, 16), -R(8, 27), 0, 0, 0, 0, 0, 0, 0],
                   [(5034 -sqrt(6)*271)*R(1,61440), 0, 0, 0, 0, 0, (7859 -sqrt(6)*1626)*R(1,10240), (-2232+sqrt(6)* 813)*R(1,20480), (-594+sqrt(6)* 271)*R(1,960),
                    (657 -sqrt(6)*813)*R(1,5120), 0, 0, 0, 0, 0, 0],
                   [(5996 -sqrt(6)*3794)*R(1,405), 0, 0, 0, 0, (-4342 -sqrt(6)*338)*R(1,9), (154922 -sqrt(6)*40458)*R(1,135), (-4176+sqrt(6)* 3794)*R(1,45),
                    (-340864+sqrt(6)* 242816)*R(1,405), (26304 -sqrt(6)*15176)*R(1,45), -R(26624, 81), 0, 0, 0, 0, 0],
                   [(3793+sqrt(6)* 2168)*R(1,103680), 0, 0, 0, 0, (4042+sqrt(6)* 2263)*R(1,13824), (-231278+sqrt(6)* 40717)*R(1,69120),
                    (7947 -sqrt(6)*2168)*R(1,11520), (1048 -sqrt(6)*542)*R(1,405), (-1383+sqrt(6)* 542)*R(1,720), R(2624, 1053), R(3, 1664), 0, 0, 0, 0],
                   [-R(137, 1296), 0, 0, 0, 0, (5642 -sqrt(6)*337)*R(1,864), (5642+sqrt(6)* 337)*R(1,864), -R(299, 48), R(184, 81), -R(44, 9),
                    -R(5120, 1053), -R(11, 468), R(16, 9), 0, 0, 0],
                   [(33617 -sqrt(6)*2168)*R(1,518400), 0, 0, 0, 0, (-3846+sqrt(6)* 31)*R(1,13824), (155338 -sqrt(6)*52807)*R(1,345600),
                    (-12537+sqrt(6)* 2168)*R(1,57600), (92+sqrt(6)* 542)*R(1,2025), (-1797 -sqrt(6)*542)*R(1,3600), R(320, 567), -R(1, 1920), R(4, 105), 0,
                    0, 0],
                   [(-36487 -sqrt(6)*30352)*R(1,279600), 0, 0, 0, 0, (-29666 -sqrt(6)*4499)*R(1,7456), (2779182 -sqrt(6)*615973)*R(1,186400),
                    (-94329+sqrt(6)* 91056)*R(1,93200), (-232192+sqrt(6)* 121408)*R(1,17475), (101226 -sqrt(6)*22764)*R(1,5825), -R(169984, 9087),
                    -R(87, 30290), R(492, 1165), 0, R(1260, 233), 0]]
rk8_9_16.nodes = [0, R(1, 12), R(1, 9), R(1, 6), (2+sqrt(6)* 2)*R(1,15), (6+sqrt(6)* 1)*R(1,15), (6 -sqrt(6)*1)*R(1,15), R(2, 3), R(1, 2), R(1, 3),
                  R(1, 4), R(4, 3), R(5, 6), 1, R(1, 6), 1]
rk8_9_16.weights = [R(103, 1680), 0, 0, 0, 0, 0, 0, -R(27, 140), R(76, 105), -R(201, 280), R(1024, 1365), R(3, 7280),
                    R(12, 35), R(9, 280), 0, 0]
rk8_9_16.correctorweights = [R(23, 525), 0, 0, 0, 0, 0, 0, R(171, 1400), R(86, 525), R(93, 280), -R(2048, 6825),
                             -R(3, 18200), R(39, 175), 0, R(9, 25), R(233, 4200)]
rk8_9_16.details = '''Verner's RK8(9)16 [4].'''
rk8_9_16.order = 8


def print_references():
    print(
        '''
REFERENCES
[1]   Butcher, J. (1964). On Runge-Kutta processes of high order. Journal of the Australian Mathematical Society, 4(2), 179-194.
[2]   Fehlberg, E. (1968). Classical Fifth-, Sixth-, Seventh-, and Eighth-Order Runge-Kutta Formulas with Stepsize Control - NASA-TR-R-287.
[3]   Fehlberg, E. (1969). Low-order classical Runge-Kutta formulas with stepsize control and their application to some heat transfer problems - NASA-TR-R-315.
[4]   Verner, J. (1978). Explicit Runge-Kutta Methods with Estimates of the Local Truncation Error. SIAM Journal on Numerical Analysis, 15(4), 772-790.
[5]   Dormand, J., & Prince, P. (1980). A family of embedded Runge-Kutta formulae. Journal of Computational and Applied Mathematics, 6, 19-26.
[6]   Prince, P., & Dormand, J. (1981). High order embedded Runge-Kutta formulae. Journal of Computational and Applied Mathematics, 7, 67-75.
[7]   Dormand, J., & Prince, P. (1986). A reconsideration of some embedded Runge—Kutta formulae. Journal of Computational and Applied Mathematics, 15(2), 203-211.
[8]   Bogacki, P., & Shampine, L. (1989). A 3(2) pair of Runge - Kutta formulas. Applied Mathematics Letters, 2(4), 321-325.
[9]   Higham, D., & Hall, G. (1990). Embedded Runge-Kutta formulae with stable equilibrium states. Journal of Computational and Applied Mathematics, 29(1), 25-33.
[10]  Cash, J., & Karp, A. (1990). A variable order Runge-Kutta method for initial value problems with rapidly varying right-hand sides. ACM Transactions on Mathematical Software (TOMS), 16(3), 201-222.
[11]  Annette M. Burden, Richard L. Burden, & J. Douglas Faires. (2016). Numerical Analysis, 10th ed.
[12]  Horn, M. (1982). Scaled Runge-Kutta algorithms for treating the problem of dense output - NASA-TM-58239.
''')
